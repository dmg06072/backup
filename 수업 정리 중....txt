### 마우스 ###
클릭이벤트
        var cnt=0;
        const d1El = document.querySelector('.d1');
        d1El.addEventListener("click",(e)=>{
            console.log("clicked...",e.target);
            d1El.innerHTML=`<h1>${++cnt}</h1>`;
        });
클릭이벤트 + 클로저 상태관리
        function clickhandler() {
            // 상태
            let cnt = 0;
            function addCnt(node) {
                cnt++;
                console.log("addCnt...",cnt);
                node.innerHTML=`<h1>${cnt}</h1)`;
            }
            return addCnt;
        }
        const addCnt = clickhandler();
        const d2El = document.querySelector('.d2');
        d2El.addEventListener("click",(e)=>{
            console.log("clicked...",e.target);
            addCnt(d2El);
        });
mouseenter   : 마우스 포인터가 특정영역내로 진입시
d3El.addEventListener('mouseenter',()=>{d3El.innerHTML=`<h1>MOUSEENTER</h1>`});
mouseover    : 마우스 포인터가 특정영역내에 머무를시
d3El.addEventListener('mouseleave',()=>{d3El.innerHTML=`<h1>MOUSELEAVE</h1>`});
mouseleave   : 마우스 포인터가 특정영역 밖으로 나갈때
d3El.addEventListener('mouseover',()=>{d3El.innerHTML=`<h1>MOUSEOVER</h1>`});
click        : 마우스 1회 클릭
d3El.addEventListener('click',()=>{d3El.innerHTML=`<h1>MOUSECLICK</h1>`});
dblckick     : 마우스 2회 클릭
d3El.addEventListener('dblclick',()=>{d3El.innerHTML=`<h1>MOUSEDOUBLECLICK</h1>`});
contextmenu  : 마우스 우클릭
d3El.addEventListener('contextmenu',(e)=>{
            d3El.innerHTML=`<h1>마우스 우클릭</h1>`
            e.preventDefault();
        });

dragstart    : 드래그 시작(마우스를 끌어당길때의 시적점)
drag         : 드래그 중
dragenter    : 드래그가 대상 영역 위로 이동시(요소가 드랍의 대상이 될때)
dragover     : 드래그가 대상 영역 위에 있는 동안(요소가 드랍의 대상이 될때)
dragleave    : 드래그가 대상 영역에서 벗어날때(요소가 드랍의 대상이 될때)
dragend      : 드래그 종료
drop         : 드랍(끌어온 마우스의 왼쪽PUSH상태 -> 손을 뗀 경우)

 const d4El = document.querySelector('.d4');
        d4El.addEventListener('dragenter',(e)=>{
            e.preventDefault();         // 이벤트 기능 차단
            console.log('dargenter...',);
        });
        d4El.addEventListener('dragover',(e)=>{
            e.preventDefault();         
            console.log('dragover...')
            // d4El.style.opacity=0.5;
            d4El.style.border="5px dashed lightgray";
            d4El.style.color="lightgray";
            
        });
        d4El.addEventListener('dragleave',(e)=>{
            e.preventDefault();
            d4El.style.border="5px dashed gray";
            d4El.style.color="gray";

        });
        d4El.addEventListener('dragend',(e)=>{
            e.preventDefault();
        });

        //유효성 검사 함수
        function isvalid(file) {
            // type이 image/* 인지
            if(!file.type.startsWith('image/')){
                alert("이미지 파일만 업로드 가능함 ㅋ.");
                return false;
            }
            // file size
            if(file.size >= (1024*1024*10)){
                alert("최대 허용 파일 크기는 1MB입니다.")
                return false;
            }

            // ture / false
            return true;
        }
        d4El.addEventListener('drop',(e)=>{
            e.preventDefault();
            d4El.style.border="5px dashed gray";
            d4El.style.color="gray";
            // console.log('drop',e);
            // console.log('drop',e.target);
            // console.log('drop',e.dataTransfer);
            // console.log('drop',e.dataTransfer.files);
            // console.log('drop',e.dataTransfer.files[0]);
            const files = e.dataTransfer.files;     
            console.log(files);

            for(let i=0;i<files.length;i++) {
                const file = files[i];      // 드래그 & 드랍 했을 때 i번째 파일 가져옴 
                // 유효성 검증
                if(!isvalid(file)) {
                    return ;                // 파일 형태가 맞지 않다면 값 반환(처리 중단)
                }
                // 이미지 PREVIEW
                const previewEl = document.querySelector('.preview');
                const newImageEl = document.createElement('img'); // img 태그 생성
                newImageEl.src = URL.createObjectURL(file);     // 생성한 이미지 요소의 src 속성에 이미지 URL 할당
                                                                // 브라우저가 해당 파일을 미리볼 수 있게 가상의 URL 생성
                previewEl.appendChild(newImageEl);      // 생성한 이미지 요소를 프리뷰 영역에 추가하여 화면에 표시
            }

        });
--------------------------------------------------------------------------------------------------------------------------------
### 키보드 ###
KEYUP    : 키보드가 올라갈 때(대소문자 구별 x)
ex)
const keyupEl = document.querySelector('#input1')
        const p1El = document.querySelector('#p1')
        keyupEl.addEventListener('keyup',(e)=>{
            console.log("keydown",e);
KEYDOWN  : 키보드가 내려갈 때
KEYPRESS : 키보드를 계속 누를 때(제어문자(ex shift)인식 하지 않는다, 영문 대소문자 구별 가능)
--------------------------------------------------------------------------------------------------------------------------------
### 체크이벤트 ###
    <script>
        const chkEl = document.querySelector('#chk');
        // change : checkbox, radio, file, textarea, select ...
        chkEl.addEventListener('change',(e)=>{
            console.log('change...',e.target.checked);
            if(e.target.checked) {
                // 체크되었을때 처리로직
                document.querySelector('.chk-block label').style.color='purple';
            }else{
                // 미체크시 처리로직
                document.querySelector('.chk-block label').style.color='black';
            }
        })
    </script>
--------------------------------------------------------------------------------------------------------------------------------
### 스크롤 ###
<script>
        const navEl = document.querySelector('.wrapper nav');
        let scrollState = 0;
        document.addEventListener('scroll',()=>{
            // window.scrollY: ViewPort를 기준으로 가장 위쪽 부분의 세로축 위치
            console.log('scorllY...', window.scrollY);
            console.log('scorllTop...', document.documentElement.scrollTop);
            // console.log('scorllHeight...', document.documentElement.scrollHeight);

            // window.scrollX : ViewPort를 기준으로 가장 왼쪽 부분부터의 가로축 위치
            // console.log('scorllX...', window.scrollX);
            // console.log('scorllX...', document.documentElement.scrollLeft);
            
            // 스크롤 값이 1000이상인 상태에서 스크롤을 위로 올렸을 때 보여줘
            // 상태값 담기위한 변수 : let scrollState
            // 상태값 언제 저장할지
            // window.scrollY>=1000 && scrollState  window.scrollY
            
            // 헤더스타일변경
            if(window.scrollY>=1000 && scrollState>window.scrollY){
                navEl.classList.remove('hide');
                navEl.classList.add('show');
            }
            else if(window.scrollY>=30){
                navEl.classList.remove('show');
                navEl.classList.add('hide');
            }
            else{
                navEl.classList.remove('hide');
                navEl.classList.add('show');

            }
            scrollState = window.scrollY;
        })
    </script>
--------------------------------------------------------------------------------------------------------------------------------
### RESIZE ###
<style>
        .ball {
            border: 1px solid;
            min-width:50px;
            min-height: 50px;
            border-radius: 50%;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom:0;
            margin:auto;
            transition:.8s;
        }
        .ball-1280px {
            width: 300px;
            height: 300px;
            border : 5px solid;
            background-color: green;
        }
        .ball-768px {
            width: 150px;
            height:150px;
            border:3px solid;
            background-color: orange;
        }
        .ball-480px {
            width: 100px;
            height:100px;
            border:1px solid;
            background-color: plum;
        }
        </style>
</head>
<body>
    <div class="ball ball-1280px"></div>
   
    <script>
        window.addEventListener('resize',()=>{
            // console.log('외부 크기 변화 width확인,',window.outerWidth);
            // console.log('외부 크기 변화 width확인,',window.outerHeight);

            console.log('내부 크기 변화 width확인,',window.innerWidth);
            // console.log('내부 크기 변화 width확인,',window.innerHeight);

            const ballEl = document.querySelector('.ball');
            // 모바일인 경우
            if(window.innerWidth<=480)
            {
                ballEl.className='ball ball-480px';
            }
            // 태블릿인 경우
            else if(window.innerWidth<=768)
            {
                ballEl.className='ball ball-768px';
            }
            // 데스크탑인 경우
            else
            {
                ballEl.className='ball ball-1280px';
            }
        })
    </script>