### 배열 ###
#배열 	: 여러 자료 Type을 저장하기 위한 자료구조
	: 배열은 순서번호(Index)를 가지고 있고 번호를 통해서 요소값에 접근가능
// let arr=['str1', "str2", `str3`, null, true, false, undefined, {name:"홍길동",age: 15}];
console.log(arr);	// 배열에 저장된 전체값 불러오기
console.log(arr[0]);	// 배열의 n번째 값 불러오기
console.log(arr[1]); 
---------------------------------------------------------------
자바스크립트의 배열은 동적확장이 가능하다
---------------------------------------------------------------
arr[8] = 100;	// 8(n)번째 배열에 원하는 값 삽입
---------------------------------------------------------------
#배열함수 
push(마지막 index+1에 값 추가), pop(마지막 index 값 제거)
arr.push('aaa'); : 배열 끝에 원하는 값 삽입(추가)
arr.pop();	: 배열 끝 값 제거
---------------------------------------------------------------
#배열 순회 : forEach
배열 내의 모든 요소를 순차적으로 접근하는 반복구문
Callback함수( 로직을 전달, ()=>{} )
arr.forEach( (요소명)=>{처리할 코드} )
Ex) arr.forEach((item)=>{ console.log('item', item)});
---------------------------------------------------------------
# 정렬
기존 배열에서 정렬 진행
sort((비교인자1, 비교인자2) => {return 비교인자1 - 비교인자})
let arr2=[10,55,11,24,5,44,1,22]
console.log(arr2);		- 기본값
오름차순 정렬
arr2.sort((a,b)=>{return a-b;});
내림차순 정렬
arr2.sort((a,b)=>{return b-a;});
약식
arr2.sort((a,b)=>b-a);
---------------------------------------------------------------
#필터
: 배열내에서 특정요소만 필터링
arr.filter((요소명) => {return 조건식})
필터링된 요소만 묶은 배열이 따로 생성
let arr3=[11, 'str1', 22, "str2", 33, `str3`, 10.5, null, true, false, undefined, 101, {name:"홍길동",age: 15}];
let result = arr3.filter(() => {return typeof item=="number"});	- 배열에서 숫자만 반환
let result2 = arr3.filter(() => {return typeof item=="string"});	- 배열에서 문자만 반환
---------------------------------------------------------------
# 누산 : 누적합, 누적곱... 누적 작업
arr.reduce((누적변수,요소명) => {처리로직}, 누적변수 초기값)
---------------------------------------------------------------
# 배열object 처리 [{},{},{}...]
---------------------------------------------------------------
#map : 기존 배열의 새로운 형태의 배열로 재구성
arr.map((요소명) => {return 재구성할 요소의 형태})
새로운 배열이 만들어짐
---------------------------------------------------------------
#프로토타입
object 객체 : 객체를 다루는 기본함수 제공
object 자료형과는 별개로 미리 만들어진 객체
console.log(Object.keys(obj));       	:obj의 key를 배열로 반환
console.log(Object.values(obj));    	:obj의 value를 배열로 반환
console.log(Object.entries(obj));   	:열거가능한 속성([key:value]) 형태의 배열로 반환
복사하기
console.log(Object.assign(obj,ob1,ob2)); 	: obj, ob1, ob2 내용을 합치고 같은 내용을 후에 나온 값을 넣어 반환
읽기전용
freeze : 기존 내용 수정 불가 + 새속성 추가 불가
Object.freeze(obj);
seal : 기존 내용 수정 가능 + 새속성 추가 불가능
Object.seal(obj);
obj.name = "ㅈ모";
console.log(obj);
        
obj["key1"]="value1";
console.log(obj);

object.prototype : 객체가 상속을 구현하는데 사용되는 메커니즘, object 객체 내에 구성
function Person(name){
            this.name=name;
        }
        
        // 프로토타입으로 객체 생성
        Person.prototype.toString=function(){
            return this.name;
        }
        Person.prototype.sayHello=function(){
            console.log("HELLO WORLD..");
        }
        const person1 = new Person("홍길동");
        console.log(person1);
        console.log(person1.toString());
        person1.sayHello();
---------------------------------------------------------------
# 연산자
- 산술연사자 
+
-
*
/
% : 짝홀수, 배수, 수의 범위 제한, 자리수

- 대입연산자 : 공간 = 값(우선처리)

- 복합대입연사자
+=
-+
*=
/+
%=...

- 증감연사자
++a
a++
--a
a--

비교연산자
>
>=
<
<=
==	: 동등 비교
!=	: 부등 비교
=== 	: 일치 비교

- 논리연산자
&&
||
!	: 논리 부정 연산자 (true or false의 값의 반대값을 반환)

- 삼항연산자
조건식 ? 참인 경우 실행 : 거짓인 경우 실행 문장

tip. parseInt : 정수 선언. 소숫점 아래 숫자 버림
---------------------------------------------------------------
함수 : 수(Data)를 받아 처리하는 논리적 공간

var변수는 가급적 사용은 지양(사용하지 않는게 좋음)
function은 목전에 따라 사용여부 결정(처음에 만든 효과를 주고싶으면 사용)
function은 기본으로 이름부여도 가능하다(익명함수 or 이름부여된 함수 선택가능)
화살표함수(()=>{}) 는 기본적으로 익명함수로 처리된다



